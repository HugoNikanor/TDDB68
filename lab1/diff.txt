diff --git a/linuxpintos/src/threads/thread.c b/linuxpintos/src/threads/thread.c
index 92d1aa8..e4e3ddb 100644
--- a/linuxpintos/src/threads/thread.c
+++ b/linuxpintos/src/threads/thread.c
@@ -195,6 +195,13 @@ thread_create (const char *name, int priority,
   /* Add to run queue. */
   thread_unblock (t);
 
+  #ifdef USERPROG
+  int i;
+  for(i = 0; i < 128; i++){
+    t->file_list[i] = NULL;
+  }
+  #endif
+
   return tid;
 }
 
@@ -277,6 +284,14 @@ thread_exit (void)
   ASSERT (!intr_context ());
 
 #ifdef USERPROG
+  //Free memory of file_list
+  struct thread *cur_thread = thread_current();
+  
+  int i;
+  for(i = 0; i < 128 && cur_thread->file_list[i] != NULL; i++){
+    free(cur_thread->file_list[i]);
+  }
+
   process_exit ();
 #endif
 
diff --git a/linuxpintos/src/threads/thread.h b/linuxpintos/src/threads/thread.h
index 0039560..2415e8b 100644
--- a/linuxpintos/src/threads/thread.h
+++ b/linuxpintos/src/threads/thread.h
@@ -5,6 +5,11 @@
 #include <list.h>
 #include <stdint.h>
 
+#ifdef USERPROG
+#include "filesys/filesys.h"
+#endif
+
+
 /* States in a thread's life cycle. */
 enum thread_status
   {
@@ -95,6 +100,7 @@ struct thread
 #ifdef USERPROG
     /* Owned by userprog/process.c. */
     uint32_t *pagedir;                  /* Page directory. */
+    struct file *file_list[128]; /* File descriptor is index+2 */
 #endif
 
     /* Owned by thread.c. */
diff --git a/linuxpintos/src/userprog/syscall.c b/linuxpintos/src/userprog/syscall.c
index 370c89b..a4321be 100644
--- a/linuxpintos/src/userprog/syscall.c
+++ b/linuxpintos/src/userprog/syscall.c
@@ -3,6 +3,10 @@
 #include <syscall-nr.h>
 #include "threads/interrupt.h"
 #include "threads/thread.h"
+#include "threads/init.h"
+#include "filesys/filesys.h"
+#include "filesys/file.h"
+#include "devices/input.h"
 
 static void syscall_handler (struct intr_frame *);
 
@@ -15,6 +19,170 @@ syscall_init (void)
 static void
 syscall_handler (struct intr_frame *f UNUSED) 
 {
-  printf ("system call!\n");
-  thread_exit ();
+  void* sp = f->esp;
+  int id = *((int*)(sp));
+
+  sp += 4;
+
+  switch(id) {
+    case SYS_HALT:
+      halt(); 
+      break;
+    case SYS_CREATE: ; //Fulhax  
+      char *file_name = *((char**)(sp));
+      sp += 4;
+      unsigned new_size = *((unsigned*)(sp));
+      f->eax = create(file_name, new_size);
+      break;
+    case SYS_OPEN: ;
+      char *f_name = *((char**)(sp));
+      f->eax = open(f_name);
+      break;
+    case SYS_CLOSE: ;
+      int fd_close = *((int*)(sp));
+      close(fd_close);
+      break;
+   case SYS_READ:
+   case SYS_WRITE: ;
+      int fd_rw = *((int*)(sp));
+      sp += 4;
+      void *buffer = *((void**)sp);
+      sp += 4;
+      unsigned buffer_size = *((unsigned*)(sp));
+      if(id == SYS_WRITE){
+	f->eax = write(fd_rw, buffer, buffer_size);
+      }
+      else{
+	f->eax = read(fd_rw, buffer, buffer_size);
+      }
+      break;
+   case SYS_EXIT: ;
+      exit(0);
+      break;
+  }
+}
+
+void
+halt (void) 
+{
+  power_off(); 
+}
+
+bool
+create (const char *file, unsigned initial_size)
+{
+  return filesys_create(file, initial_size);
+}
+
+int
+open (const char *file_name){
+  struct file *f = filesys_open(file_name);
+
+  if(f == NULL){
+    return -1;
+  }
+  else{
+    struct thread *current_thread = thread_current();
+    int fd = -1;
+    int i;
+
+    for(i = 0; i < 128 && fd == -1; i++){
+      if(current_thread->file_list[i] == NULL){
+	current_thread->file_list[i] = f;
+	fd = i + 2; //File descriptor is 2 higher than index, since i = 0, 1 belongs to console
+      }
+    }
+    return fd;
+  }
+}
+
+void
+close(int fd){
+  struct thread *cur_thread = thread_current();
+  struct file *close_file = cur_thread->file_list[fd-2];
+
+  file_close(close_file);
+  cur_thread->file_list[fd - 2] = NULL;
+}
+
+int 
+read(int fd, void *buffer, unsigned size){
+  if(fd == 0){
+    //Read from console
+    unsigned i = 0;
+    for(i = 0; i < size; i++){
+      *((uint8_t*)buffer) = input_getc();
+      buffer++;
+    }
+    return size;
+  }
+  else if (fd >= 2 && fd <= 127){
+    struct thread *cur_thread = thread_current();
+    struct file *read_file = cur_thread->file_list[fd-2];
+
+    if(read_file == NULL){
+      return -1;
+    }
+
+    int read_bytes = file_read(read_file, buffer, (off_t)size);
+
+    if(read_bytes == 0){
+      return -1;
+    }
+    else{
+      return read_bytes;
+    }
+  }
+  else{
+    //Not legitimate fd
+    return -1;
+  }
+}
+
+int 
+write(int fd, void *buffer, unsigned size){
+  if(fd == 1){
+    //write to console
+    int remaining_bytes = size;
+
+    while(remaining_bytes != 0){
+      if(remaining_bytes < 100){
+	putbuf((char*) buffer, remaining_bytes);
+	remaining_bytes = 0;
+      }
+      else{
+        putbuf((char*) buffer,100);
+	remaining_bytes -= 100;
+      }
+    }
+
+    return size;
+  }
+  else if(fd >= 2 && fd <= 127){
+    struct thread *cur_thread = thread_current();
+    struct file *write_file = cur_thread->file_list[fd-2];
+
+    printf("write file is %i\n", write_file);
+
+    if(write_file == NULL){
+      return -1;
+    }
+    
+    int written_bytes = file_write(write_file, buffer, size);
+
+   if(written_bytes == 0){
+      return -1;
+    }
+    else{
+      return written_bytes;
+    } 
+  }
+  else{
+    return -1;
+  }
+}
+
+void
+exit(int status) {
+  thread_exit();
 }
diff --git a/linuxpintos/src/userprog/syscall.h b/linuxpintos/src/userprog/syscall.h
index 9059096..93b2ce8 100644
--- a/linuxpintos/src/userprog/syscall.h
+++ b/linuxpintos/src/userprog/syscall.h
@@ -1,6 +1,13 @@
 #ifndef USERPROG_SYSCALL_H
 #define USERPROG_SYSCALL_H
+#include <stdbool.h>
 
 void syscall_init (void);
-
+void halt(void);
+bool create(const char *file, unsigned initial_size);
+int open(const char *file_name);
+void close(int fd);
+int read(int fd, void *buffer, unsigned size);
+int write(int fd, void *buffer, unsigned size);
+void exit(int status);
 #endif /* userprog/syscall.h */
