diff --git a/linuxpintos/src/devices/timer.c b/linuxpintos/src/devices/timer.c
index 58e26f5..a4521de 100644
--- a/linuxpintos/src/devices/timer.c
+++ b/linuxpintos/src/devices/timer.c
@@ -7,7 +7,7 @@
 #include "threads/io.h"
 #include "threads/synch.h"
 #include "threads/thread.h"
-
+  
 /* See [8254] for hardware details of the 8254 timer chip. */
 
 #if TIMER_FREQ < 19
@@ -20,9 +20,6 @@
 /* Number of timer ticks since OS booted. */
 static int64_t ticks;
 
-/* List of sleeping threads */
-static struct list wait_queue;  
-
 /* Number of loops per timer tick.
    Initialized by timer_calibrate(). */
 static unsigned loops_per_tick;
@@ -47,8 +44,6 @@ timer_init (void)
   outb (0x40, count >> 8);
 
   intr_register_ext (0x20, timer_interrupt, "8254 Timer");
-
-  list_init(&wait_queue);
 }
 
 /* Calibrates loops_per_tick, used to implement brief delays. */
@@ -97,32 +92,15 @@ timer_elapsed (int64_t then)
   return timer_ticks () - then;
 }
 
-/* returns true if a is less or greater than b */
-bool
-sleeping_node_compare(const struct list_elem *a, const struct list_elem *b, void *aux) 
-{
-  return list_entry(a,struct sleeping_node, elem)->wakeup_tick <= list_entry(b, struct sleeping_node, elem)->wakeup_tick;
-}
-
 /* Suspends execution for approximately TICKS timer ticks. */
 void
-timer_sleep (int64_t ticks)
+timer_sleep (int64_t ticks) 
 {
   int64_t start = timer_ticks ();
 
   ASSERT (intr_get_level () == INTR_ON);
-
-  struct thread *curr_thread = thread_current();
- 
-  struct sleeping_node new_node;
-  new_node.sleeping_thread = curr_thread;
-  new_node.wakeup_tick = start + ticks;
-
-  intr_disable();
-  list_insert_ordered(&wait_queue, &new_node.elem, &sleeping_node_compare, NULL);
-  intr_enable();
-
-  sema_down(&curr_thread->thread_sema);
+  while (timer_elapsed (start) < ticks) 
+    thread_yield ();
 }
 
 /* Suspends execution for approximately MS milliseconds. */
@@ -158,19 +136,6 @@ static void
 timer_interrupt (struct intr_frame *args UNUSED)
 {
   ticks++;
-
-  enum intr_level old_level;
-  
-  //Check sleeping processes and wake up if sleeping time is done.
-  old_level = intr_disable ();
-  while(!list_empty(&wait_queue) && 
-	list_entry(list_front(&wait_queue), struct sleeping_node, elem)->wakeup_tick <= ticks){
-    struct sleeping_node *wakeup_node = list_entry(list_pop_front(&wait_queue), struct sleeping_node, elem);
-
-    sema_up(&wakeup_node->sleeping_thread->thread_sema);
-  }
-  intr_set_level (old_level);
-
   thread_tick ();
 }
 
@@ -237,4 +202,3 @@ real_time_sleep (int64_t num, int32_t denom)
     }
 }
 
-
diff --git a/linuxpintos/src/threads/thread.c b/linuxpintos/src/threads/thread.c
index 3562897..f63934d 100644
--- a/linuxpintos/src/threads/thread.c
+++ b/linuxpintos/src/threads/thread.c
@@ -451,8 +451,6 @@ init_thread (struct thread *t, const char *name, int priority)
   t->stack = (uint8_t *) t + PGSIZE;
   t->priority = priority;
   t->magic = THREAD_MAGIC;
-
-  sema_init(&t->thread_sema, 0);
 }
 
 /* Allocates a SIZE-byte frame at the top of thread T's stack and
diff --git a/linuxpintos/src/threads/thread.h b/linuxpintos/src/threads/thread.h
index 3eb0ceb..2415e8b 100644
--- a/linuxpintos/src/threads/thread.h
+++ b/linuxpintos/src/threads/thread.h
@@ -4,7 +4,6 @@
 #include <debug.h>
 #include <list.h>
 #include <stdint.h>
-#include <threads/synch.h>
 
 #ifdef USERPROG
 #include "filesys/filesys.h"
@@ -104,9 +103,6 @@ struct thread
     struct file *file_list[128]; /* File descriptor is index+2 */
 #endif
 
-    /* Semaphore for thread*/
-    struct semaphore thread_sema;
-
     /* Owned by thread.c. */
     unsigned magic;                     /* Detects stack overflow. */
   };
